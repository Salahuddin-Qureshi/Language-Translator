import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [inputText, setInputText] = useState('');
  const [translatedText, setTranslatedText] = useState('');
  const [sourceLang, setSourceLang] = useState('en');
  const [targetLang, setTargetLang] = useState('ur');
  const [isTranslating, setIsTranslating] = useState(false);
  const [history, setHistory] = useState([]);

  const languages = [
    { code: 'en', name: 'English', flag: 'üá¨üáß' },
    { code: 'ur', name: 'Urdu', flag: 'üáµüá∞' },
    { code: 'ru', name: 'Russian', flag: 'üá∑üá∫' },
    { code: 'sd', name: 'Sindhi', flag: 'üáµüá∞' },
    { code: 'es', name: 'Spanish', flag: 'üá™üá∏' },
    { code: 'de', name: 'German', flag: 'üá©üá™' },
    { code: 'it', name: 'Italian', flag: 'üáÆüáπ' },
    { code: 'fr', name: 'French', flag: 'üá´üá∑' },
    { code: 'ar', name: 'Arabic', flag: 'üá∏üá¶' },
    { code: 'zh', name: 'Chinese', flag: 'üá®üá≥' },
    { code: 'ja', name: 'Japanese', flag: 'üáØüáµ' },
    { code: 'ko', name: 'Korean', flag: 'üá∞üá∑' },
  ];

  // Sample translation phrases for each language
  const samplePhrases = {
    en: [
      "Hello, how are you?",
      "What is your name?",
      "Where are you from?",
      "I love learning languages",
      "Pakistan is a beautiful country"
    ],
    ur: [
      "€Å€åŸÑŸàÿå ÿ¢Ÿæ ⁄©€åÿ≥€í €Å€å⁄∫ÿü",
      "ÿ¢Ÿæ ⁄©ÿß ŸÜÿßŸÖ ⁄©€åÿß €Å€íÿü",
      "ÿ¢Ÿæ ⁄©€Åÿß⁄∫ ÿ≥€í €Å€å⁄∫ÿü",
      "ŸÖÿ¨⁄æ€í ÿ≤ÿ®ÿßŸÜ€å⁄∫ ÿ≥€å⁄©⁄æŸÜÿß Ÿæÿ≥ŸÜÿØ €Å€í",
      "Ÿæÿß⁄©ÿ≥ÿ™ÿßŸÜ ÿß€å⁄© ÿÆŸàÿ®ÿµŸàÿ±ÿ™ ŸÖŸÑ⁄© €Å€í"
    ],
    ru: [
      "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
      "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
      "–û—Ç–∫—É–¥–∞ —Ç—ã?",
      "–Ø –ª—é–±–ª—é –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫–∏",
      "–ü–∞–∫–∏—Å—Ç–∞–Ω - –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"
    ],
    sd: [
      "ŸáŸäŸÑŸàÿå ÿ™ŸàŸÜ ⁄™Ÿäÿ¶ŸÜ ÿ¢ŸáŸäŸÜÿü",
      "ÿ™ŸàŸáÿßŸÜ ÿ¨Ÿà ŸÜÿßŸÑŸà ⁄áÿß ÿ¢ŸáŸäÿü",
      "ÿ™ŸàŸáÿßŸÜ ⁄™ŸøÿßŸÜ ÿ¢ŸáŸäŸàÿü",
      "ŸÖŸàŸÜ ⁄©Ÿä ÿ≤ÿ®ÿßŸÜ ÿ≥⁄©⁄ª Ÿæÿ≥ŸÜÿØ ÿ¢ŸáŸä",
      "Ÿæÿß⁄™ÿ≥ÿ™ÿßŸÜ Ÿá⁄™ ÿÆŸàÿ®ÿµŸàÿ±ÿ™ ŸÖŸÑ⁄™ ÿ¢ŸáŸä"
    ],
    es: [
      "Hola, ¬øc√≥mo est√°s?",
      "¬øCu√°l es tu nombre?",
      "¬øDe d√≥nde eres?",
      "Me encanta aprender idiomas",
      "Pakist√°n es un hermoso pa√≠s"
    ],
    de: [
      "Hallo, wie geht es dir?",
      "Wie hei√üt du?",
      "Woher kommst du?",
      "Ich liebe es, Sprachen zu lernen",
      "Pakistan ist ein sch√∂nes Land"
    ],
    it: [
      "Ciao, come stai?",
      "Come ti chiami?",
      "Di dove sei?",
      "Adoro imparare le lingue",
      "Il Pakistan √® un bellissimo paese"
    ],
    fr: [
      "Bonjour, comment vas-tu ?",
      "Comment vous appelez-vous ?",
      "D'o√π viens-tu ?",
      "J'aime apprendre des langues",
      "Le Pakistan est un beau pays"
    ],
    ar: [
      "ŸÖÿ±ÿ≠ÿ®ÿßÿå ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿü",
      "ŸÖÿß ÿßÿ≥ŸÖŸÉÿü",
      "ŸÖŸÜ ÿ£ŸäŸÜ ÿ£ŸÜÿ™ÿü",
      "ÿ£ÿ≠ÿ® ÿ™ÿπŸÑŸÖ ÿßŸÑŸÑÿ∫ÿßÿ™",
      "ÿ®ÿßŸÉÿ≥ÿ™ÿßŸÜ ÿ®ŸÑÿØ ÿ¨ŸÖŸäŸÑ"
    ],
    zh: [
      "‰Ω†Â•ΩÔºå‰Ω†Â•ΩÂêóÔºü",
      "‰Ω†Âè´‰ªÄ‰πàÂêçÂ≠óÔºü",
      "‰Ω†Êù•Ëá™Âì™ÈáåÔºü",
      "ÊàëÁà±Â≠¶‰π†ËØ≠Ë®Ä",
      "Â∑¥Âü∫ÊñØÂù¶ÊòØ‰∏Ä‰∏™Áæé‰∏ΩÁöÑÂõΩÂÆ∂"
    ],
    ja: [
      "„Åì„Çì„Å´„Å°„ÅØ„ÄÅ„ÅäÂÖÉÊ∞ó„Åß„Åô„ÅãÔºü",
      "„ÅäÂêçÂâç„ÅØ‰Ωï„Åß„Åô„ÅãÔºü",
      "„Å©„Åì„Åã„ÇâÊù•„Åü„ÅÆÔºü",
      "Ë®ÄË™û„ÇíÂ≠¶„Å∂„ÅÆ„ÅåÂ§ßÂ•Ω„Åç„Åß„Åô",
      "„Éë„Ç≠„Çπ„Çø„É≥„ÅØÁæé„Åó„ÅÑÂõΩ„Åß„Åô"
    ],
    ko: [
      "ÏïàÎÖïÌïòÏÑ∏Ïöî, Ïûò ÏßÄÎÇ¥ÏÑ∏Ïöî?",
      "Ïù¥Î¶ÑÏù¥ Î≠êÏòàÏöî?",
      "Ïñ¥ÎîîÏóêÏÑú ÏôîÎÇòÏöî?",
      "Ïñ∏Ïñ¥Î•º Î∞∞Ïö∞Îäî Í±∏ Ï¢ãÏïÑÌï¥Ïöî",
      "ÌååÌÇ§Ïä§ÌÉÑÏùÄ ÏïÑÎ¶ÑÎã§Ïö¥ ÎÇòÎùºÏòàÏöî"
    ]
  };

  const translateText = async () => {
    if (!inputText.trim()) return;

    setIsTranslating(true);

    try {
      const response = await fetch(
        `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURIComponent(inputText)}`
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      let result = data[0] && data[0][0] && data[0][0][0] 
        ? data[0][0][0] 
        : 'Translation failed. Please try again.';

      setTranslatedText(result);

      // Add to history
      const newEntry = {
        id: Date.now(),
        sourceText: inputText,
        translatedText: result,
        sourceLang,
        targetLang,
        timestamp: new Date().toLocaleTimeString('en-US', { timeZone: 'Asia/Karachi' })
      };

      setHistory(prev => [newEntry, ...prev.slice(0, 9)]);
      setIsTranslating(false);
    } catch (error) {
      console.error('Translation error:', error);
      setTranslatedText('Translation failed. Please try again.');
      setIsTranslating(false);
    }
  };

  const swapLanguages = () => {
    setSourceLang(targetLang);
    setTargetLang(sourceLang);
    setInputText(translatedText);
    setTranslatedText(inputText);
  };

  const clearText = () => {
    setInputText('');
    setTranslatedText('');
  };

  const handleSampleClick = (phrase) => {
    setInputText(phrase);
  };

  // Auto-translate when languages change if text exists
  useEffect(() => {
    if (inputText) {
      translateText();
    }
  }, [sourceLang, targetLang]);

  return (
    <div className="app">
      <header>
        <h1>üåç Polyglot Translator</h1>
        <p>Translate text between multiple languages instantly</p>
      </header>
      
      <main>
        <div className="language-selectors">
          <div className="language-selector">
            <label>From:</label>
            <select 
              value={sourceLang} 
              onChange={(e) => setSourceLang(e.target.value)}
            >
              {languages.map(lang => (
                <option key={`source-${lang.code}`} value={lang.code}>
                  {lang.flag} {lang.name}
                </option>
              ))}
            </select>
          </div>
          
          <button className="swap-btn" onClick={swapLanguages}>
            üîÑ
          </button>
          
          <div className="language-selector">
            <label>To:</label>
            <select 
              value={targetLang} 
              onChange={(e) => setTargetLang(e.target.value)}
            >
              {languages.map(lang => (
                <option key={`target-${lang.code}`} value={lang.code}>
                  {lang.flag} {lang.name}
                </option>
              ))}
            </select>
          </div>
        </div>
        
        <div className="translation-container">
          <div className="input-section">
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="Enter text to translate..."
              rows="5"
            ></textarea>
            
            <div className="sample-phrases">
              <h4>Sample Phrases:</h4>
              <div className="phrase-list">
                {samplePhrases[sourceLang]?.map((phrase, index) => (
                  <button 
                    key={index} 
                    className="phrase-btn"
                    onClick={() => handleSampleClick(phrase)}
                  >
                    {phrase}
                  </button>
                ))}
              </div>
            </div>
          </div>
          
          <div className="output-section">
            <textarea
              value={translatedText}
              readOnly
              placeholder="Translation will appear here..."
              rows="5"
              className={targetLang === 'ur' || targetLang === 'ar' ? 'rtl-text' : ''}
            ></textarea>
            
            {isTranslating && (
              <div className="loading">
                <div className="spinner"></div>
                Translating...
              </div>
            )}
          </div>
        </div>
        
        <div className="action-buttons">
          <button 
            className="translate-btn" 
            onClick={translateText}
            disabled={isTranslating || !inputText.trim()}
          >
            {isTranslating ? 'Translating...' : 'Translate'}
          </button>
          
          <button 
            className="clear-btn" 
            onClick={clearText}
            disabled={!inputText && !translatedText}
          >
            Clear
          </button>
        </div>
        
        {history.length > 0 && (
          <div className="translation-history">
            <h3>Recent Translations</h3>
            <ul>
              {history.map(entry => (
                <li key={entry.id}>
                  <div className="history-entry">
                    <div className="history-text">
                      <strong>{entry.sourceText}</strong> 
                      <span className="lang-label">
                        ({languages.find(l => l.code === entry.sourceLang)?.name})
                      </span>
                    </div>
                    <div className="history-arrow">‚Üí</div>
                    <div className="history-text">
                      {entry.translatedText} 
                      <span className="lang-label">
                        ({languages.find(l => l.code === entry.targetLang)?.name})
                      </span>
                    </div>
                    <div className="history-time">{entry.timestamp}</div>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        )}
      </main>
      
      <footer>
        <p>¬© 2025 Polyglot Translator | Designed for Vercel Deployment</p>
        <p>Supports English, Urdu, Russian, Sindhi, Spanish, German, Italian and more</p>
      </footer>
    </div>
  );
}

export default App;